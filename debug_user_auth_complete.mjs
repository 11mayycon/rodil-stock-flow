import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';

const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseKey = 'sb_publishable_ACJWlzQHlZjBrEguHvfOxg_3BJgxAaH';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugUserAuthComplete() {
  try {
    console.log('üîç Debugando autentica√ß√£o completa do usu√°rio com CPF 10533219531...\n');

    const cpf = '10533219531';
    const password = '1285041';

    // 1. Verificar se o usu√°rio existe
    console.log('1Ô∏è‚É£ Verificando se o usu√°rio existe...');
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('cpf', cpf)
      .eq('blocked', false);

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ùå Usu√°rio n√£o encontrado com CPF:', cpf);
      return;
    }

    const user = users[0];
    console.log('‚úÖ Usu√°rio encontrado:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Nome: ${user.name}`);
    console.log(`   CPF: ${user.cpf}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Role: ${user.role}`);
    console.log(`   Blocked: ${user.blocked}`);

    // 2. Verificar senha
    console.log('\n2Ô∏è‚É£ Verificando senha...');
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    console.log(`   Senha v√°lida: ${isValidPassword ? '‚úÖ' : '‚ùå'}`);

    if (!isValidPassword) {
      console.log('‚ùå Senha inv√°lida, parando debug');
      return;
    }

    // 3. Verificar produtos existentes
    console.log('\n3Ô∏è‚É£ Verificando produtos...');
    let { data: products, error: productError } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (productError) {
      console.error('‚ùå Erro ao buscar produtos:', productError);
      return;
    }

    let product;
    if (!products || products.length === 0) {
      console.log('   Nenhum produto encontrado, criando produto de teste...');
      
      // Criar produto de teste
      const { data: newProduct, error: createError } = await supabase
        .from('products')
        .insert([{
          nome: 'Produto Teste Debug',
          codigo_barras: '1234567890123',
          preco: 10.50,
          quantidade_estoque: 100,
          unidade: 'UN',
          descricao: 'Produto criado para teste de debug'
        }])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Erro ao criar produto:', createError);
        return;
      }

      product = newProduct;
      console.log('‚úÖ Produto de teste criado:', product.nome);
    } else {
      product = products[0];
      console.log('‚úÖ Produto encontrado:', product.nome);
    }

    // 4. Simular inser√ß√£o de waste_record como se fosse o frontend
    console.log('\n4Ô∏è‚É£ Simulando inser√ß√£o de waste_record...');
    
    console.log(`   Produto para teste: ${product.nome} (ID: ${product.id})`);

    // Tentar inserir waste_record
    const wasteData = {
      product_id: product.id,
      user_id: user.id,
      quantidade: 1,
      motivo: 'Teste de debug - CPF espec√≠fico',
    };

    console.log('   Dados do waste_record:', wasteData);

    const { data: wasteResult, error: wasteError } = await supabase
      .from('waste_records')
      .insert([wasteData])
      .select();

    if (wasteError) {
      console.error('‚ùå Erro ao inserir waste_record:', wasteError);
      console.error('   Detalhes:', wasteError.message);
      console.error('   C√≥digo:', wasteError.code);
      console.error('   Hint:', wasteError.hint);
      
      // Verificar se √© erro de RLS
      if (wasteError.message.includes('row-level security policy')) {
        console.log('\nüîç Erro de RLS detectado! Verificando pol√≠ticas...');
        
        // Verificar pol√≠ticas RLS ativas
        const { data: policies, error: policyError } = await supabase
          .rpc('exec_sql', {
            sql: `
              SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check
              FROM pg_policies 
              WHERE tablename = 'waste_records'
              ORDER BY policyname;
            `
          });

        if (policyError) {
          console.error('‚ùå Erro ao verificar pol√≠ticas:', policyError);
        } else {
          console.log('üìã Pol√≠ticas RLS ativas para waste_records:');
          policies.forEach(policy => {
            console.log(`   - ${policy.policyname} (${policy.cmd}): ${policy.permissive}`);
          });
        }
      }
    } else {
      console.log('‚úÖ Waste_record inserido com sucesso:', wasteResult[0].id);
      
      // 5. Testar atualiza√ß√£o de estoque
      console.log('\n5Ô∏è‚É£ Testando atualiza√ß√£o de estoque...');
      const { error: stockError } = await supabase
        .from('products')
        .update({ quantidade_estoque: product.quantidade_estoque - 1 })
        .eq('id', product.id);

      if (stockError) {
        console.error('‚ùå Erro ao atualizar estoque:', stockError);
      } else {
        console.log('‚úÖ Estoque atualizado com sucesso');
      }

      // 6. Testar inser√ß√£o de stock_movement
      console.log('\n6Ô∏è‚É£ Testando inser√ß√£o de stock_movement...');
      const { error: movementError } = await supabase
        .from('stock_movements')
        .insert([{
          product_id: product.id,
          user_id: user.id,
          tipo: 'desperdicio',
          quantidade: -1,
          motivo: 'Teste de debug - CPF espec√≠fico',
        }]);

      if (movementError) {
        console.error('‚ùå Erro ao inserir stock_movement:', movementError);
      } else {
        console.log('‚úÖ Stock_movement inserido com sucesso');
      }

      // Limpar os testes
      console.log('\nüßπ Limpando dados de teste...');
      await supabase.from('stock_movements').delete().eq('motivo', 'Teste de debug - CPF espec√≠fico');
      await supabase.from('waste_records').delete().eq('id', wasteResult[0].id);
      await supabase.from('products').update({ quantidade_estoque: product.quantidade_estoque }).eq('id', product.id);
      console.log('‚úÖ Dados de teste removidos');
    }

    // 7. Verificar pol√≠ticas RLS para este usu√°rio
    console.log('\n7Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    
    // Testar SELECT
    const { data: selectTest, error: selectError } = await supabase
      .from('waste_records')
      .select('*')
      .eq('user_id', user.id)
      .limit(1);

    if (selectError) {
      console.error('‚ùå Erro no SELECT:', selectError.message);
    } else {
      console.log(`‚úÖ SELECT funcionando - ${selectTest.length} registros encontrados`);
    }

    console.log('\nüìä Resumo do debug:');
    console.log(`   ‚úÖ Usu√°rio existe e est√° ativo`);
    console.log(`   ‚úÖ Senha est√° correta`);
    console.log(`   ‚úÖ Produto dispon√≠vel para teste`);
    console.log(`   ${wasteError ? '‚ùå' : '‚úÖ'} Inser√ß√£o de waste_record`);

  } catch (error) {
    console.error('üí• Erro geral:', error);
  }
}

debugUserAuthComplete();